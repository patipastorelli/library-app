using System.Net.Http.Json;
using Library.Api.Models;

namespace Library.Api.Data
{
    public class HttpBookRepository(HttpClient client) : IBookRepository
    {
        private readonly HttpClient _client = client;

        public async Task<(IEnumerable<Book> Items, int Total)> QueryAsync(string? search, int page, int pageSize)
        {
            var url = $"books"; //?search={Uri.EscapeDataString(search ?? "")}&page={page}&pageSize={pageSize}";
            var resp = await _client.GetFromJsonAsync<List<Book>>(url);
            if (resp == null) return (Enumerable.Empty<Book>(), 0);
            return (resp, resp.Count);
        }

        public async Task<Book> AddAsync(Book book)
        {
            // Do not send Id — it is generated by the API
            var payload = new { title = book.Title, author = book.Author, isbn=book.isbn, publishDate=book.PublishedDate};
            var resp = await _client.PostAsJsonAsync("book", payload);
            resp.EnsureSuccessStatusCode();
            return (await resp.Content.ReadFromJsonAsync<Book>())!;
        }

        public async Task<Book?> GetAsync(int id)
        {
            var resp = await _client.GetAsync($"book/{id}");
            if (!resp.IsSuccessStatusCode) return null;
            return await resp.Content.ReadFromJsonAsync<Book>();
        }

        //public async Task<bool> DeleteAsync(int id)
        //{
        //    var resp = await _client.DeleteAsync($"book/{id}");
        //    return resp.IsSuccessStatusCode;
        //}

        public async Task<bool> UpdateAsync(Book book)
        {
            // Assuming PUT updates full book record
            var resp = await _client.PutAsJsonAsync($"book/{book.Id}", book);
            return resp.IsSuccessStatusCode;
        }

        public Task<bool> DeleteAsync(int id)
        {
            throw new NotImplementedException();
        }
    }
}
